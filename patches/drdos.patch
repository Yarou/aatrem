diff --git a/src/server/server.h b/../aatrem/src/server/server.h
index 6d7ffdd..d816fde 100644
--- a/src/server/server.h
+++ b/../aatrem/src/server/server.h
@@ -49,7 +49,7 @@ typedef struct voipServerPacket_s
 typedef struct svEntity_s {
 	struct worldSector_s *worldSector;
 	struct svEntity_s *nextEntityInWorldSector;
-	
+
 	entityState_t	baseline;		// for delta compression of initial sighting
 	int			numClusters;		// if -1, use headnode instead
 	int			clusternums[MAX_ENT_CLUSTERS];
@@ -72,7 +72,7 @@ typedef struct {
 	int				checksumFeed;		// the feed key that we use to compute the pure checksum strings
 	// https://zerowing.idsoftware.com/bugzilla/show_bug.cgi?id=475
 	// the serverId associated with the current checksumFeed (always <= serverId)
-	int       checksumFeedServerId;	
+	int       checksumFeedServerId;
 	int				snapshotCounter;	// incremented for each snapshot built
 	int				timeResidual;		// <= 1000 / sv_frame->value
 	int				nextFrameTime;		// when time > nextFrameTime, process world
@@ -189,7 +189,7 @@ typedef struct client_s {
 #endif
 
 	int				oldServerTime;
-	qboolean			csUpdated[MAX_CONFIGSTRINGS+1];	
+	qboolean			csUpdated[MAX_CONFIGSTRINGS+1];
 } client_t;
 
 //=============================================================================
@@ -211,6 +211,14 @@ typedef struct {
 	qboolean	connected;
 } challenge_t;
 
+typedef struct {
+  netadr_t  adr;
+  int    time;
+} receipt_t;
+
+// MAX_INFO_RECEIPTS is the maximum number of getstatus+getinfo responses that we send
+// in a two second time period.
+#define MAX_INFO_RECEIPTS  48
 
 #define	MAX_MASTERS	8				// max recipients for heartbeat packets
 
@@ -229,6 +237,7 @@ typedef struct {
 	entityState_t	*snapshotEntities;		// [numSnapshotEntities]
 	int			nextHeartbeatTime;
 	challenge_t	challenges[MAX_CHALLENGES];	// to prevent invalid IPs from connecting
+	receipt_t   infoReceipts[MAX_INFO_RECEIPTS];
 	netadr_t	redirectAddress;			// for rcon return messages
 
 	netadr_t	authorizeAddress;			// for rcon return messages
diff --git a/src/server/sv_main.c b/../aatrem/src/server/sv_main.c
index 0b8df81..02665ba 100644
--- a/src/server/sv_main.c
+++ b/../aatrem/src/server/sv_main.c
@@ -162,7 +162,7 @@ void SV_AddServerCommand( client_t *client, const char *cmd ) {
 =================
 SV_SendServerCommand
 
-Sends a reliable command string to be interpreted by 
+Sends a reliable command string to be interpreted by
 the client game module: "cp", "print", "chat", etc
 A NULL client will broadcast to all clients
 =================
@@ -172,7 +172,7 @@ void QDECL SV_SendServerCommand(client_t *cl, const char *fmt, ...) {
 	byte		message[MAX_MSGLEN];
 	client_t	*client;
 	int			j;
-	
+
 	va_start (argptr,fmt);
 	Q_vsnprintf ((char *)message, sizeof(message), fmt,argptr);
 	va_end (argptr);
@@ -250,7 +250,7 @@ void SV_MasterHeartbeat( void ) {
 		// do it when needed
 		if ( sv_master[i]->modified ) {
 			sv_master[i]->modified = qfalse;
-	
+
 			Com_Printf( "Resolving %s\n", sv_master[i]->string );
 			if ( !NET_StringToAdr( sv_master[i]->string, &adr[i], NA_UNSPEC ) ) {
 				Com_Printf( "Couldn't resolve address: %s\n", sv_master[i]->string );
@@ -362,7 +362,7 @@ void SVC_Status( netadr_t from ) {
 		cl = &svs.clients[i];
 		if ( cl->state >= CS_CONNECTED ) {
 			ps = SV_GameClientNum( i );
-			Com_sprintf (player, sizeof(player), "%i %i \"%s\"\n", 
+			Com_sprintf (player, sizeof(player), "%i %i \"%s\"\n",
 				ps->persistant[PERS_SCORE], cl->ping, cl->name);
 			playerLength = strlen(player);
 			if (statusLength + playerLength >= sizeof(status) ) {
@@ -416,7 +416,7 @@ void SVC_Info( netadr_t from ) {
 	Info_SetValueForKey( infostring, "hostname", sv_hostname->string );
 	Info_SetValueForKey( infostring, "mapname", sv_mapname->string );
 	Info_SetValueForKey( infostring, "clients", va("%i", count) );
-	Info_SetValueForKey( infostring, "sv_maxclients", 
+	Info_SetValueForKey( infostring, "sv_maxclients",
 		va("%i", sv_maxclients->integer - sv_privateClients->integer ) );
 	Info_SetValueForKey( infostring, "pure", va("%i", sv_pure->integer ) );
 
@@ -451,6 +451,96 @@ void SV_FlushRedirect( char *outputbuf ) {
 }
 
 /*
+=================
+SV_CheckDRDoS
+
+DRDoS stands for "Distributed Reflected Denial of Service".
+See here: http://www.lemuria.org/security/application-drdos.html
+
+Returns qfalse if we're good.  qtrue return value means we need to block.
+If the address isn't NA_IP, it's automatically denied.
+=================
+*/
+qboolean SV_CheckDRDoS(netadr_t from)
+{
+  int    i;
+  int    globalCount;
+  int    specificCount;
+  receipt_t  *receipt;
+  netadr_t  exactFrom;
+  int    oldest;
+  int    oldestTime;
+  static int  lastGlobalLogTime = 0;
+  static int  lastSpecificLogTime = 0;
+
+  // Usually the network is smart enough to not allow incoming UDP packets
+  // with a source address being a spoofed LAN address.  Even if that's not
+  // the case, sending packets to other hosts in the LAN is not a big deal.
+  // NA_LOOPBACK qualifies as a LAN address.
+  if (Sys_IsLANAddress(from)) { return qfalse; }
+
+  exactFrom = from;
+
+  if (from.type == NA_IP) {
+    from.ip[3] = 0; // xx.xx.xx.0
+  }
+  else {
+    // So we got a connectionless packet but it's not IPv4, so
+    // what is it?  I don't care, it doesn't matter, we'll just block it.
+    // This probably won't even happen.
+    return qtrue;
+  }
+
+  // Count receipts in last 2 seconds.
+  globalCount = 0;
+  specificCount = 0;
+  receipt = &svs.infoReceipts[0];
+  oldest = 0;
+  oldestTime = 0x7fffffff;
+  for (i = 0; i < MAX_INFO_RECEIPTS; i++, receipt++) {
+    if (receipt->time + 2000 > svs.time) {
+      if (receipt->time) {
+        // When the server starts, all receipt times are at zero.  Furthermore,
+        // svs.time is close to zero.  We check that the receipt time is already
+        // set so that during the first two seconds after server starts, queries
+        // from the master servers don't get ignored.  As a consequence a potentially
+        // unlimited number of getinfo+getstatus responses may be sent during the
+        // first frame of a server's life.
+        globalCount++;
+      }
+      if (NET_CompareBaseAdr(from, receipt->adr)) {
+        specificCount++;
+      }
+    }
+    if (receipt->time < oldestTime) {
+      oldestTime = receipt->time;
+      oldest = i;
+    }
+  }
+
+  if (globalCount == MAX_INFO_RECEIPTS) { // All receipts happened in last 2 seconds.
+    if (lastGlobalLogTime + 1000 <= svs.time){ // Limit one log every second.
+      Com_Printf("Detected flood of getinfo/getstatus connectionless packets\n");
+      lastGlobalLogTime = svs.time;
+    }
+    return qtrue;
+  }
+  if (specificCount >= 3) { // Already sent 3 to this IP in last 2 seconds.
+    if (lastSpecificLogTime + 1000 <= svs.time) { // Limit one log every second.
+      Com_Printf("Possible DRDoS attack to address %i.%i.%i.%i, ignoring getinfo/getstatus connectionless packet\n",
+          exactFrom.ip[0], exactFrom.ip[1], exactFrom.ip[2], exactFrom.ip[3]);
+      lastSpecificLogTime = svs.time;
+    }
+    return qtrue;
+  }
+
+  receipt = &svs.infoReceipts[oldest];
+  receipt->adr = from;
+  receipt->time = svs.time;
+  return qfalse;
+}
+
+/*
 ===============
 SVC_RemoteCommand
 
@@ -485,7 +575,7 @@ void SVC_RemoteCommand( netadr_t from, msg_t *msg ) {
 			Cvar_Set ("sv_rconLog", "");
 		}
 	}
-	
+
 	const char *message = "";
 	if ( !strlen( sv_rconPassword->string ) ||
 		strcmp (Cmd_Argv(1), sv_rconPassword->string) ) {
@@ -495,7 +585,7 @@ void SVC_RemoteCommand( netadr_t from, msg_t *msg ) {
 		valid = qtrue;
 		message = va("Rcon from %s: %s\n", NET_AdrToString (from), Cmd_ArgsFrom(2));
 	}
-	
+
 	Com_Printf (message);
 	if (rconLog) {
 		qtime_t qt;
@@ -505,7 +595,7 @@ void SVC_RemoteCommand( netadr_t from, msg_t *msg ) {
 		FS_Write(message, strlen(message), rconLog);
 		FS_FCloseFile(rconLog);
 	}
-	
+
 	// start redirecting all print outputs to the packet
 	svs.redirectAddress = from;
 	Com_BeginRedirect (sv_outputbuf, SV_OUTPUTBUF_LENGTH, SV_FlushRedirect);
@@ -516,7 +606,7 @@ void SVC_RemoteCommand( netadr_t from, msg_t *msg ) {
 		Com_Printf ("Bad rconpassword.\n");
 	} else {
 		remaining[0] = 0;
-		
+
 		// https://zerowing.idsoftware.com/bugzilla/show_bug.cgi?id=543
 		// get the command directly, "rcon <pass> <command>" to avoid quoting issues
 		// extract the command by walking
@@ -529,9 +619,9 @@ void SVC_RemoteCommand( netadr_t from, msg_t *msg ) {
 			cmd_aux++;
 		while(cmd_aux[0]==' ')
 			cmd_aux++;
-		
+
 		Q_strcat( remaining, sizeof(remaining), cmd_aux);
-		
+
 		Cmd_ExecuteString (remaining);
 
 	}
@@ -567,8 +657,10 @@ void SV_ConnectionlessPacket( netadr_t from, msg_t *msg ) {
 	Com_DPrintf ("SV packet %s : %s\n", NET_AdrToString(from), c);
 
 	if (!Q_stricmp(c, "getstatus")) {
+      if (SV_CheckDRDoS(from)) { return; }
 		SVC_Status( from  );
   } else if (!Q_stricmp(c, "getinfo")) {
+	  if (SV_CheckDRDoS(from)) { return; }
 		SVC_Info( from );
 	} else if (!Q_stricmp(c, "getchallenge")) {
 		SV_GetChallenge( from );
@@ -644,7 +736,7 @@ void SV_PacketEvent( netadr_t from, msg_t *msg ) {
 		}
 		return;
 	}
-	
+
 	// if we received a sequenced packet from an address we don't recognize,
 	// send an out of band disconnect packet to it
 	NET_OutOfBandPrint( NS_SERVER, from, "disconnect" );
@@ -705,7 +797,7 @@ void SV_CalcPings( void ) {
 ==================
 SV_CheckTimeouts
 
-If a packet has not been received from a client for timeout->integer 
+If a packet has not been received from a client for timeout->integer
 seconds, drop the conneciton.  Server time is used instead of
 realtime to avoid dropping the local client while debugging.
 
@@ -740,7 +832,7 @@ void SV_CheckTimeouts( void ) {
 			// wait several frames so a debugger session doesn't
 			// cause a timeout
 			if ( ++cl->timeoutCount > 5 ) {
-				SV_DropClient (cl, "timed out"); 
+				SV_DropClient (cl, "timed out");
 				cl->state = CS_FREE;	// don't bother with zombie state
 			}
 		} else {
